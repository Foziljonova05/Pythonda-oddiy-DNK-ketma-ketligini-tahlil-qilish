# -*- coding: utf-8 -*-
"""Untitled10.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FaA9sBSwUoeOQmb5V5lrUUZeRdr9P1LJ
"""

!pip install Biopython
from Bio.Seq import Seq
import matplotlib.pyplot as plt
import pandas as pd

# Define a DNA sequence
dna_sequence = Seq("ATGCGTACGTTAGCCTAGGCTAGCTAGGCTA")

# Reverse the DNA sequence
reversed_sequence = dna_sequence[::-1]
print("Reversed Sequence:", reversed_sequence)

# Complement of the DNA sequence
complement_sequence = dna_sequence.complement()
print("Complement Sequence:", complement_sequence)

# Reverse Complement of the DNA sequence
reverse_complement_sequence = dna_sequence.reverse_complement()
print("Reverse Complement Sequence:", reverse_complement_sequence)

# Transcription of the DNA sequence to RNA
rna_sequence = dna_sequence.transcribe()
print("RNA Sequence:", rna_sequence)

# Calculate GC content
gc_content = 100 * (dna_sequence.count("G") + dna_sequence.count("C")) / len(dna_sequence)
print("GC Content (%):", gc_content)

# Count each nucleotide in the sequence
nucleotide_counts = {
    "A": dna_sequence.count("A"),
    "T": dna_sequence.count("T"),
    "G": dna_sequence.count("G"),
    "C": dna_sequence.count("C"),
}

# Convert counts to a DataFrame for easier plotting
nucleotide_df = pd.DataFrame(list(nucleotide_counts.items()), columns=["Nucleotide", "Count"])

# Plot the nucleotide composition
plt.figure(figsize=(8, 5))
plt.bar(nucleotide_df["Nucleotide"], nucleotide_df["Count"], color=["blue", "orange", "green", "red"])
plt.xlabel("Nucleotide")
plt.ylabel("Count")
plt.title("Nucleotide Composition of DNA Sequence")
plt.show()